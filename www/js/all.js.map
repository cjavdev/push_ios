{"version":3,"sources":["app.js","config.js","DashCtrl.js","Users.js","LoginCtrl.js","AccountCtrl.js","Friends.js","FriendRequests.js","FriendsCtrl.js","FriendRequestsCtrl.js","Workouts.js","WorkoutSets.js","WorkoutCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7EA;AACA;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["/*global angular, openFB, window, cordova */\n\nvar dependencies = ['ionic', 'push.controllers', 'push.services'];\n\nwindow.PB = angular.module('push', dependencies)\n  .run(function ($ionicPlatform) {\n    openFB.init({ appId: '1389364367952791' });\n\n    $ionicPlatform.ready(function () {\n      // Hide the accessory bar by default (remove this to show the\n      // accessory bar above the keyboard for form inputs)\n      if (window.cordova && window.cordova.plugins.Keyboard) {\n        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      }\n\n      if (window.StatusBar) {\n        // org.apache.cordova.statusbar required\n        StatusBar.styleDefault();\n      }\n    });\n  })\n  .constant('loc', {\n    // apiBase: 'http://localhost:3000'\n    apiBase: 'http://www.pushbit.io'\n  });\n\n","/*globals PB, angular */\n\nangular.module('push.controllers', []);\nangular.module('push.services', []);\n\nPB.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {\n    // Ionic uses AngularUI Router which uses the concept of states\n    // Learn more here: https://github.com/angular-ui/ui-router\n    // Set up the various states which the app can be in.\n    //\n    // Each state's controller can be found in controllers.js\n    // alternatively, register the interceptor via an anonymous factory\n    $httpProvider.interceptors.push(function($q, $rootScope) {\n      return {\n        'responseError': function(rejection) {\n           if(rejection.status === 403) {\n             console.log('Unauthorized');\n             $rootScope.$broadcast('event:auth-loginRequired', rejection);\n           }\n           return $q.reject(rejection);\n        }\n      };\n    });\n\n    $stateProvider\n      .state('workout', {\n        url: '/workout',\n        templateUrl: \"templates/workout.html\",\n      })\n      .state('tab', {\n        url: \"/tab\",\n        abstract: true,\n        templateUrl: \"templates/tabs.html\"\n      })\n      .state('tab.dash', {\n        url: '/dash',\n        views: {\n          'tab-dash': {\n            templateUrl: 'templates/tab-dash.html',\n            controller: 'DashCtrl'\n          }\n        }\n      })\n      .state('tab.friends', {\n        url: '/friends',\n        views: {\n          'tab-friends': {\n            templateUrl: 'templates/tab-friends.html',\n            controller: 'FriendsCtrl'\n          }\n        }\n      })\n      .state('tab.account', {\n        url: '/account',\n        views: {\n          'tab-account': {\n            templateUrl: 'templates/tab-account.html',\n            controller: 'AccountCtrl'\n          }\n        }\n      });\n\n    $urlRouterProvider.otherwise('/tab/dash');\n  });\n","/*global angular */\nangular.module('push.controllers')\n  .controller('DashCtrl', function($scope, $state, $ionicModal, Workouts) {\n    $scope.workouts = [];\n    function setupWorkouts () {\n      Workouts.all().then(function (workouts) {\n        console.log('got all workouts');\n        console.log(workouts);\n        $scope.workouts = workouts;\n      });\n    }\n\n    setupWorkouts();\n    console.log('setting up loginConfirmed event');\n    $scope.$on('event:auth-loginConfirmed', function() {\n      setupWorkouts();\n    });\n\n    $scope.startWorkout = function () {\n      $state.go('workout', {}, { reload: true, inherit: false });\n    };\n\n    $ionicModal.fromTemplateUrl('templates/login.html', function (modal) {\n      $scope.loginModal = modal;\n    }, {\n      scope: $scope,\n      animation: 'slide-in-up'\n    });\n\n    $scope.$on('$destroy', function () {\n      $scope.loginModal.remove();\n    });\n  });\n","/*global angular,openFB */\nangular.module('push.services')\n  .factory('Users', function ($q, $http, $window, $rootScope, loc) {\n    function fbLogin() {\n      var dfd = $q.defer();\n      openFB.login(function (response) {\n        if (response.status === \"connected\") {\n          getFBAuthParams(response.authResponse).\n            then(function (user) {\n              dfd.resolve(user);\n            });\n        } else {\n          dfd.reject(response.status);\n        }\n      }, {\n        scope: 'email,user_friends,public_profile'\n      });\n      return dfd.promise;\n    }\n\n    function getFBAuthParams(authResponse) {\n      var dfd = $q.defer();\n      openFB.api({\n        path: '/v1.0/me',\n        success: function (response) {\n          response.authResponse = authResponse;\n          pushbitLogin(response).\n            then(function (user) {\n              dfd.resolve(user);\n            });\n        },\n        error: function () {\n          dfd.reject();\n        }\n      });\n      return dfd.promise;\n    }\n\n    function saveUser(params) {\n      $window.localStorage['currentUser'] = JSON.stringify(params);\n    }\n\n    function currentUser() {\n      return JSON.parse($window.localStorage['currentUser']);\n    }\n\n    function pushbitLogin(loginParams) {\n      var deferred = $q.defer();\n      $http.post(loc.apiBase + '/session', loginParams).\n        then(function (response) {\n          updateHeaders(response.data);\n          saveUser(response.data);\n          deferred.resolve(response.data);\n          $rootScope.$broadcast('event:auth-loginConfirmed');\n        });\n      return deferred.promise;\n    }\n\n    function updateHeaders(params) {\n      $http.defaults.headers.common['AuthToken-X'] = params.session_token;\n    }\n\n    function fbLogout() {\n      var dfd = $q.defer();\n      openFB.logout(function () {\n        $rootScope.$broadcast('event:auth-loginRequired');\n        dfd.resolve();\n      });\n      return dfd.promise;\n    }\n\n    return {\n      login: function () {\n        return fbLogin();\n      },\n      logout: function () {\n        return fbLogout();\n      },\n      currentUser: currentUser\n    };\n  });\n\n","angular.module('push.controllers')\n  .controller('LoginCtrl', function($scope, $state, Users) {\n    $scope.message = '';\n    $scope.login = function () {\n      Users.login();\n    };\n\n    $scope.$on('event:auth-loginRequired', function(e, rejection) {\n      $scope.loginModal.show();\n    });\n\n    $scope.$on('event:auth-loginConfirmed', function() {\n      console.log('login confirmed');\n      $scope.loginModal.hide();\n    });\n\n    $scope.$on('event:auth-loginFailed', function (e, status) {\n      console.log('login failed');\n      $scope.message = \"Login Failed\";\n    });\n\n    $scope.$on('event:auth-logoutComplete', function() {\n      console.log('login complete');\n      $state.go('tab.dash', {}, { reload: true, inherit: false });\n    });\n  });\n","angular.module('push.controllers')\n  .controller('AccountCtrl', function($scope, Users) {\n    $scope.logout = function () {\n      Users.logout();\n    };\n    $scope.settings = {\n      enableFriends: true\n    };\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('Friends', function ($http, loc) {\n    return {\n      all: function () {\n        return $http.get(loc.apiBase + '/friendships');\n      },\n      inviteFriend: function (email) {\n        return $http.post(loc.apiBase + '/friend_requests', { email: email });\n      }\n    };\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('FriendRequests', function ($q, $http, $rootScope, Users, loc) {\n    return {\n      all: function () {\n        return $http.get(loc.apiBase + '/friend_requests');\n      }\n    };\n  });\n\n","angular.module('push.controllers')\n  .controller('FriendsCtrl', function($scope, $ionicModal, Friends, FriendRequests) {\n    $scope.friends = [];\n    $scope.friend_requests = [];\n\n    Friends.all().then(function (friends) {\n      $scope.friends = friends;\n    }, function () {\n       console.log('something went wrong when getting friends');\n    });\n\n    FriendRequests.all().then(function (friend_requests) {\n      $scope.friend_requests = friend_requests;\n    }, function () {\n      console.log('something went wrong when showing friend requests');\n    });\n\n    $ionicModal.fromTemplateUrl('templates/friendships.html', function (modal) {\n      $scope.friendshipsModal = modal;\n    }, {\n      scope: $scope,\n      animation: 'slide-in-up'\n    });\n\n    $scope.showFriendships = function () {\n      $scope.friendshipsModal.show();\n    };\n\n    $scope.done = function () {\n      $scope.friendshipsModal.hide();\n    };\n  });\n","angular.module('push.controllers')\n  .controller('FriendshipsCtrl', function($scope, Friends) {\n    $scope.friendEmail = '';\n\n    $scope.inviteFriend = function(email) {\n      console.log('inviting', email);\n      Friends.inviteFriend(email).then(function (friends) {\n        $scope.friendEmail = '';\n        $scope.message = 'Sent!';\n      });\n    }\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('Workouts', function ($http, $q, $rootScope, $state, loc) {\n    function url(id) {\n      if (id) {\n        return loc.apiBase + '/workouts/' + id;\n      }\n      return loc.apiBase + '/workouts';\n    }\n\n    function Workout(attrs) {\n      this.id = attrs.id;\n      this.completed_date = attrs.completed_date;\n      this.workout_sets = attrs.workout_sets;\n    }\n\n    Workout.prototype.addSet = function (set) {\n      var dfd = $q.defer();\n      $http.post(url(this.id) + '/workout_sets', {\n        reps: set.reps\n      }).\n      then(function (response) {\n        dfd.resolve(response.data);\n      }, function (response) {\n        dfd.reject(response);\n      });\n      return dfd.promise;\n    };\n\n    Workout.prototype.complete = function () {\n      var dfd = $q.defer();\n      $http.put(url(this.id), {}).\n        then(function (response) {\n          dfd.resolve(response.data);\n        }, function (response) {\n          dfd.reject(response);\n        });\n      return dfd.promise;\n    };\n\n    Workout.prototype.totalReps = function () {\n      var reps = 0;\n      this.workout_sets.forEach(function (set) {\n        reps += set.reps;\n      });\n      return reps;\n    };\n\n    Workout.prototype.completedAt = function () {\n      if (!this.completed_date) {\n        return 'Incomplete';\n      }\n      return this.completed_date;\n    };\n\n    return {\n      all: function () {\n        var dfd = $q.defer();\n        $http.get(url()).\n          then(function (resp) {\n            var workouts = _.map(resp.data, function (w) {\n              return new Workout(w);\n            });\n            dfd.resolve(workouts);\n          }, function (resp) {\n            dfd.reject(resp.data);\n          });\n        return dfd.promise;\n      },\n      get: function (id) {\n        var dfd = $q.defer();\n        $http.get(url(id)).\n          then(function (resp) {\n            dfd.resolve(resp.data);\n          }, function (resp) {\n            dfd.reject(resp.data);\n          });\n        return dfd.promise;\n      },\n      create: function () {\n        var dfd = $q.defer();\n        $http.post(url(), {}).\n          then(function (response) {\n            dfd.resolve(new Workout(response.data));\n          }, function(response) {\n            dfd.reject(response);\n          });\n        return dfd.promise;\n      },\n    };\n  });\n","","angular.module('push.controllers')\n  .controller('WorkoutCtrl', function($scope, $state, Workouts) {\n    Workouts.create().then(function (workout) {\n      console.log('workout created');\n      console.log(workout);\n      $scope.workout = workout;\n    }, function () {\n      console.log('uh on workout not created');\n    });\n\n    $scope.sets = [];\n    $scope.reps = 0;\n\n    $scope.push = function () {\n      $scope.reps++;\n    };\n\n    function Set(reps) {\n      this.reps = reps;\n    }\n\n    $scope.completeSet = function () {\n      var set = new Set($scope.reps);\n      $scope.workout.addSet(set).then(function () {\n        $scope.sets.push(set);\n        $scope.reps = 0;\n      });\n    };\n\n    $scope.completeWorkout = function () {\n      if($scope.reps > 0) {\n        var set = new Set($scope.reps);\n        $scope.workout.addSet(set).then(function () {\n          $scope.sets.push($scope.reps);\n          $scope.reps = 0;\n        });\n      }\n      $scope.workout.complete().then(function () {\n        $scope.sets = [];\n        $scope.reps = 0;\n        $state.go('tab.dash', {}, { reload: true, inherit: false });\n      });\n    };\n  });\n\n"],"sourceRoot":"/source/"}