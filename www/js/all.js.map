{"version":3,"sources":["app.js","config.js","BaseCtrl.js","filters.js","Model.js","EventBus.js","User.js","LoginCtrl.js","AccountCtrl.js","Friend.js","FriendRequest.js","FriendsCtrl.js","FriendRequestsCtrl.js","Workout.js","WorkoutSet.js","WorkoutCtrl.js","WorkoutsCtrl.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACblHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"all.js","sourcesContent":["/*global angular, openFB, window, cordova */\n\nvar dependencies = ['ionic', 'push.controllers', 'push.services', 'push.filters'];\n\nwindow.PB = angular.module('push', dependencies)\n  .run(function ($ionicPlatform) {\n    openFB.init({\n      appId: '1389364367952791'\n    });\n\n    $ionicPlatform.ready(function () {\n      // Hide the accessory bar by default (remove this to show the\n      // accessory bar above the keyboard for form inputs)\n      if (window.cordova && window.cordova.plugins.Keyboard) {\n        cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);\n      }\n\n      if (window.StatusBar) {\n        // org.apache.cordova.statusbar required\n        StatusBar.styleDefault();\n      }\n    });\n  })\n  .constant('loc', {\n    // apiBase: 'http://localhost:3000'\n    apiBase: 'http://www.pushbit.io'\n  });\n","/*globals PB, angular */\n\nangular.module('push.controllers', []);\nangular.module('push.services', []);\nangular.module('push.filters', []);\n\nPB.config(function ($stateProvider, $urlRouterProvider, $httpProvider, $windowProvider) {\n  $httpProvider.interceptors.push(function ($q, EventBus) {\n    return {\n      'responseError': function (rejection) {\n        if (rejection.status === 403) {\n          EventBus.trigger('loginRequired', rejection);\n        }\n        return $q.reject(rejection);\n      }\n    };\n  });\n\n  var $window = $windowProvider.$get();\n  $httpProvider.defaults.headers.common['AuthToken-X'] = $window.localStorage.authToken;\n\n  $stateProvider\n    .state('workout', {\n      url: \"/workout/:id\",\n      templateUrl: \"templates/workout.html\"\n    })\n    .state('tab', {\n      url: \"/tab\",\n      abstract: true,\n      templateUrl: \"templates/tabs.html\"\n    })\n    .state('tab.workouts', {\n      url: '/workouts',\n      views: {\n        'tab-workouts': {\n          templateUrl: 'templates/tab-workouts.html',\n          controller: 'WorkoutsCtrl'\n        }\n      }\n    })\n    .state('tab.friends', {\n      url: '/friends',\n      views: {\n        'tab-friends': {\n          templateUrl: 'templates/tab-friends.html',\n          controller: 'FriendsCtrl'\n        }\n      }\n    })\n    .state('tab.account', {\n      url: '/account',\n      views: {\n        'tab-account': {\n          templateUrl: 'templates/tab-account.html',\n          controller: 'AccountCtrl'\n        }\n      }\n    });\n\n  $urlRouterProvider.otherwise('/tab/workouts');\n});\n","/*global angular */\nangular.module('push.controllers')\n  .controller('BaseCtrl', function ($scope, $ionicModal) {\n    $ionicModal.fromTemplateUrl('templates/login.html', function (modal) {\n      $scope.loginModal = modal;\n    }, {\n      scope: $scope,\n      animation: 'slide-in-up'\n    });\n\n    $scope.$on('$destroy', function () {\n      $scope.loginModal.remove();\n    });\n  });\n","/*global angular */\n\nangular.module('push.filters')\n  .filter('reverse', function () {\n    return function (items) {\n      return items.slice().reverse();\n    };\n  });\n","/*global _, angular */\nangular.module('push.services')\n  .factory('Model', function ($http, $q, $window, loc) {\n    return function (options) {\n      var path = options.path;\n      var url = loc.apiBase + path;\n\n      class Model {\n        constructor(attrs) {\n          this.setup.apply(this, arguments);\n          attrs = attrs || {};\n          this.attributes = {};\n          this.set(this.parse(attrs));\n          this.initialize.apply(this, arguments);\n        }\n\n        get id() {\n          return this.attributes.id;\n        }\n\n        initialize() {\n        }\n\n        setup() {\n        }\n\n        dummy() {\n          console.log('calling dummy');\n          return \"dummy\";\n        }\n\n        set(attrs) {\n          for(var attr in attrs) {\n            this.attributes[attr] = attrs[attr];\n          }\n          return this;\n        }\n\n        get(key) {\n          return this.attributes[key];\n        }\n\n        parse(response) {\n          return response;\n        }\n\n        save() {\n          if(this.id) {\n            console.log('updating!', this.attributes);\n            return this.update();\n          } else {\n            console.log('creating!', this.attributes);\n            return this.create();\n          }\n        }\n\n        update() {\n          var dfd = $q.defer();\n          $http\n            .put(this.url(), this.attributes)\n            .then((response) => {\n              this.set(this.parse(response.data));\n              dfd.resolve(this);\n            }, (response) => {\n              dfd.reject(this);\n            });\n          return dfd.promise;\n        }\n\n        create() {\n          var dfd = $q.defer();\n          $http\n            .post(this.url(), this.attributes)\n            .then((response) => {\n              this.set(this.parse(response.data));\n              dfd.resolve(this);\n            }, (response) => {\n              dfd.reject(this);\n            });\n          return dfd.promise;\n        }\n\n        url() {\n          if(this.id) {\n            return url + '/' + this.id;\n          } else {\n            return url;\n          }\n        }\n      }\n\n      Model.url = () => { return url; };\n\n      var _all = [];\n\n      function readAllLocal() {\n        if($window.localStorage[path]) {\n          var attrs = JSON.parse($window.localStorage[path]);\n          _all = _.map(attrs, (attr) => { return new Model(attr) });\n        }\n      }\n\n      function writeAllLocal(attrs) {\n        $window.localStorage[path] = JSON.stringify(attrs);\n      }\n\n      Model.ids = function () {\n        return _.map(_all, (model) => { return model.id });\n      };\n\n      Model.all = function () {\n        readAllLocal();\n        var ids = Model.ids();\n\n        $http.get(url, { cache: true }).then((response) => {\n          writeAllLocal(response.data);\n\n          _.each(response.data, (data) => {\n            if(!_.contains(ids, data.id)) {\n              _all.push(new Model(data));\n            }\n          });\n        });\n\n        return _all;\n      };\n\n      Model.create = function (attributes) {\n        var model = new Model(attributes);\n        _all.push(model);\n        return model.save();\n      };\n\n      return Model;\n    };\n  });\n","/*global _, angular */\nangular.module('push.services')\n  .factory('EventBus', function () {\n    var events = {};\n\n    return {\n      on: function(eventName, callback) {\n        console.log('ListeningTo: ', eventName);\n        events[eventName] = (events[eventName] || []);\n        events[eventName].push(callback);\n      },\n\n      trigger: function(eventName) {\n        console.log('Triggering: ', eventName);\n        events[eventName] = (events[eventName] || []);\n\n        var args = [].slice.call(arguments, 1);\n        for(var callback of events[eventName]) {\n          callback(args);\n        }\n      }\n    }\n  });\n","/*global angular,openFB */\nangular.module('push.services')\n  .factory('User', function ($q, $http, $window, EventBus, loc) {\n    function updateHeaders(params) {\n      $window.localStorage.authToken = params.session_token;\n      $http.defaults.headers.common['AuthToken-X'] = params.session_token;\n    }\n\n    function saveUser(params) {\n      $window.localStorage.currentUser = JSON.stringify(params);\n    }\n\n    function currentUser() {\n      return JSON.parse($window.localStorage.currentUser);\n    }\n\n    function pushbitLogin(loginParams) {\n      var dfd = $q.defer();\n      $http.post(loc.apiBase + '/session', loginParams).\n        then(function (response) {\n          updateHeaders(response.data);\n          saveUser(response.data);\n          dfd.resolve(response.data);\n          EventBus.trigger('loginCompleted');\n          EventBus.trigger('authChange');\n        });\n      return dfd.promise;\n    }\n\n    function getFBAuthParams(authResponse) {\n      var dfd = $q.defer();\n      openFB.api({\n        path: '/v1.0/me',\n        success: function (response) {\n          response.authResponse = authResponse;\n          pushbitLogin(response).\n            then(function (user) {\n              dfd.resolve(user);\n            });\n        },\n        error: function () {\n          dfd.reject();\n        }\n      });\n      return dfd.promise;\n    }\n\n    function fbLogin() {\n      var dfd = $q.defer();\n      openFB.login(function (response) {\n        if (response.status === \"connected\") {\n          getFBAuthParams(response.authResponse).\n            then(function (user) {\n              dfd.resolve(user);\n            });\n        } else {\n          dfd.reject(response.status);\n        }\n      }, {\n        scope: 'email,user_friends,public_profile'\n      });\n      return dfd.promise;\n    }\n\n    function fbLogout() {\n      var dfd = $q.defer();\n      // openFB.logout(function () {\n      EventBus.trigger('loginRequired');\n      EventBus.trigger('authChange');\n      dfd.resolve();\n      // });\n      return dfd.promise;\n    }\n\n    return {\n      login: function () {\n        return fbLogin();\n      },\n      logout: function () {\n        $window.localStorage.removeItem('authToken');\n        return fbLogout();\n      },\n      currentUser: currentUser\n    };\n  });\n\n","/*global angular */\n\nangular.module('push.controllers')\n  .controller('LoginCtrl', function($scope, $state, User, EventBus) {\n    $scope.message = '';\n    $scope.login = function () {\n      User.login();\n    };\n\n    EventBus.on('loginRequired', function(e, rejection) {\n      $scope.loginModal.show();\n    });\n\n    EventBus.on('loginCompleted', function() {\n      $scope.loginModal.hide();\n    });\n\n    EventBus.on('loginFailed', function (e, status) {\n      $scope.message = \"Login Failed\";\n    });\n\n    EventBus.on('logoutCompleted', function() {\n      $state.go('tab.dash', {}, { reload: true, inherit: false });\n    });\n  });\n","/*global angular */\n\nangular.module('push.controllers')\n  .controller('AccountCtrl', function($scope, User) {\n    $scope.logout = () => { User.logout(); };\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('Friend', function ($http, Model, loc) {\n    var Friend = Model({ path: '/friendships' });\n\n    Friend.inviteFriend = function (email) {\n      return $http.post(loc.apiBase + '/friend_requests', {\n        email: email\n      });\n    };\n\n    return Friend;\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('FriendRequest', function ($q, $http, $rootScope, Users, loc) {\n    return {\n      all: function () {\n        return $http.get(loc.apiBase + '/friend_requests');\n      }\n    };\n  });\n\n","/*global angular */\nangular.module('push.controllers')\n  .controller('FriendsCtrl', function($scope, $ionicModal, Friend, FriendRequest) {\n    $scope.friends = [];\n    // $scope.friend_requests = [];\n\n    Friend.all().then(function (friends) {\n      $scope.friends = friends;\n    }, function () {\n       console.log('something went wrong when getting friends');\n    });\n\n    // FriendRequest.all().then(function (friend_requests) {\n    //   $scope.friend_requests = friend_requests;\n    // }, function () {\n    //   console.log('something went wrong when showing friend requests');\n    // });\n    //\n    // $ionicModal.fromTemplateUrl('templates/friendships.html', function (modal) {\n    //   $scope.friendshipsModal = modal;\n    // }, {\n    //   scope: $scope,\n    //   animation: 'slide-in-up'\n    // });\n    //\n    // $scope.showFriendships = function () {\n    //   $scope.friendshipsModal.show();\n    // };\n    //\n    // $scope.done = function () {\n    //   $scope.friendshipsModal.hide();\n    // };\n  });\n","angular.module('push.controllers')\n  .controller('FriendshipsCtrl', function($scope, Friend) {\n    $scope.friendEmail = '';\n\n    $scope.inviteFriend = function(email) {\n      console.log('inviting', email);\n      Friend.inviteFriend(email).then(function (friends) {\n        $scope.friendEmail = '';\n        $scope.message = 'Sent!';\n      });\n    }\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('Workout', function ($http, $q, Model, WorkoutSet, loc) {\n    var Workout = Model({ path: '/workouts' });\n\n    Workout.prototype.setup = function () {\n      this.workout_sets = [];\n    };\n\n    Workout.prototype.parse = function (response) {\n      if(response.workout_sets) {\n        console.log('response has workout_sets');\n        this.workout_sets = _.map(response.workout_sets, (s) => {\n          return new WorkoutSet(s);\n        });\n        delete response.workout_sets;\n      }\n      return response;\n    };\n\n    Workout.prototype.totalReps = function () {\n      var reps = 0;\n      for(var set of this.workout_sets) {\n        reps += set.get('reps');\n      }\n      return reps;\n    };\n\n    Workout.prototype.completedAt = function () {\n      if (!this.get('completed_date')) {\n        return 'Incomplete';\n      }\n      return this.get('completed_date');\n    };\n\n    return Workout;\n  });\n","/*global _, openFB, angular */\nangular.module('push.services')\n  .factory('WorkoutSet', function (Model, loc) {\n    var WorkoutSet = Model({ path: '/workout_sets' });\n\n    WorkoutSet.prototype.url = function () {\n      if(!this.id) {\n        return loc.apiBase + '/workouts/' + this.get('workout_id') + '/workout_sets';\n      }\n      return loc.apiBase + '/workout_sets' + this.id;\n    };\n\n    return WorkoutSet;\n  });\n","/*global angular */\nangular.module('push.controllers')\n  .controller('WorkoutCtrl', function($scope, $state, $stateParams, EventBus, Workout, WorkoutSet) {\n    $scope.sets = [];\n    $scope.reps = 0;\n    $scope.workout = null;\n\n    function getWorkout(id) {\n      console.log('Getting Workout');\n      Workout.get(id);\n    }\n\n    function createWorkout() {\n      console.log('Creating Workout');\n      Workout\n        .create()\n        .then(function (workout) {\n          $scope.workout = workout;\n          console.log('workout created', workout);\n        }, function () {\n          console.log('uhoh workout not created', arguments);\n        });\n    }\n\n    function setupWorkout() {\n      if($stateParams.id === \"new\") {\n        createWorkout();\n      } else {\n        getWorkout($stateParams.id);\n      }\n    }\n\n    setupWorkout();\n    EventBus.on('authChange', setupWorkout);\n\n    $scope.push = function () {\n      $scope.reps++;\n    };\n\n    $scope.completeSet = function () {\n      var set = new WorkoutSet({\n        reps: $scope.reps,\n        workout_id: $scope.workout.get('id')\n      });\n\n      $scope.sets.push(set.attributes);\n      $scope.workout.workout_sets.push(set);\n\n      set.save().then((response) => {\n        $scope.reps = 0;\n        console.log('workout.workout_sets: ', $scope.workout.workout_sets);\n      });\n    };\n\n    $scope.completeWorkout = function () {\n      if($scope.reps > 0) {\n        var set = new WorkoutSet({\n          reps: $scope.reps,\n          workout_id: $scope.workout.get('id')\n        });\n\n        $scope.sets.push(set);\n        $scope.workout.workout_sets.push(set);\n        $scope.reps = 0;\n        set.save();\n      }\n\n      $scope.workout.set({ completed_date: new Date() });\n      $scope.workout.save().then(() => {\n        $scope.sets = [];\n        $scope.reps = 0;\n        $state.go('tab.workouts', {}, { reload: true, inherit: false });\n      });\n    };\n  });\n","/*global angular */\n\nangular.module('push.controllers')\n  .controller('WorkoutsCtrl', function($scope, EventBus, Workout) {\n    $scope.workouts = [];\n\n    function setupWorkouts () {\n      console.log('setting up workouts');\n      $scope.workouts = Workout.all();\n    }\n    setupWorkouts();\n\n    EventBus.on('loginCompleted', setupWorkouts);\n  });\n"],"sourceRoot":"/source/"}